class Quadtree{constructor(t,i){this.boundary=t,this.capacity=i,this.particles=[],this.divided=!1,this.northeast=null,this.northwest=null,this.southeast=null,this.southwest=null}contains(t){return t.x>=this.boundary.x-this.boundary.width/2&&t.x<=this.boundary.x+this.boundary.width/2&&t.y>=this.boundary.y-this.boundary.height/2&&t.y<=this.boundary.y+this.boundary.height/2}intersects(t){return!(t.x-t.width/2>this.boundary.x+this.boundary.width/2||t.x+t.width/2<this.boundary.x-this.boundary.width/2||t.y-t.height/2>this.boundary.y+this.boundary.height/2||t.y+t.height/2<this.boundary.y-this.boundary.height/2)}insert(t){return!!this.contains(t)&&(this.particles.length<this.capacity&&!this.divided?(this.particles.push(t),!0):(this.divided||this.subdivide(),!!this.northeast.insert(t)||(!!this.northwest.insert(t)||(!!this.southeast.insert(t)||!!this.southwest.insert(t)))))}subdivide(){const t=this.boundary.x,i=this.boundary.y,e=this.boundary.width/2,s=this.boundary.height/2;this.northeast=new Quadtree({x:t+e/2,y:i-s/2,width:e,height:s},this.capacity),this.northwest=new Quadtree({x:t-e/2,y:i-s/2,width:e,height:s},this.capacity),this.southeast=new Quadtree({x:t+e/2,y:i+s/2,width:e,height:s},this.capacity),this.southwest=new Quadtree({x:t-e/2,y:i+s/2,width:e,height:s},this.capacity),this.divided=!0;for(let t of this.particles)this.northeast.insert(t)||this.northwest.insert(t)||this.southeast.insert(t)||this.southwest.insert(t);this.particles=[]}query(t,i){if(i||(i=[]),!this.intersects(t))return i;for(let e of this.particles){const s=e.x-t.x,r=e.y-t.y;s*s+r*r<=t.radius*t.radius&&i.push(e)}return this.divided&&(this.northeast.query(t,i),this.northwest.query(t,i),this.southeast.query(t,i),this.southwest.query(t,i)),i}}class WebGLParticles{constructor(t,i){this.tag_id=t,this.params=i,this.canvas=null,this.gl=null,this.program=null,this.lineProgram=null,this.particles=[],this.mouse={x:0,y:0},this.lines=[],this.quadtree=null,this.animationId=null,this.positions=[],this.sizes=[],this.colors=[],this.linePositions=[],this.lineColors=[],this.lastFrameTime=0,this.frameInterval=1e3/24,this.init()}init(){this.setupCanvas(),this.setupWebGL(),this.createShaders(),this.createBuffers(),this.createParticles(),this.setupEvents(),this.animate()}setupCanvas(){const t=document.getElementById(this.tag_id);this.canvas=document.createElement("canvas"),this.canvas.className="particles-js-canvas-el",this.canvas.style.width="100%",this.canvas.style.height="100%",t.appendChild(this.canvas),this.resize()}setupWebGL(){if(this.gl=this.canvas.getContext("webgl")||this.canvas.getContext("experimental-webgl"),!this.gl)return void console.error("WebGL not supported");const t=this.gl;t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA)}createShaders(){const t=this.gl,i=this.createShader(t.VERTEX_SHADER,"\n            attribute vec2 a_position;\n            attribute float a_size;\n            attribute vec4 a_color;\n            \n            uniform vec2 u_resolution;\n            \n            varying vec4 v_color;\n            \n            void main() {\n                vec2 clipSpace = ((a_position / u_resolution) * 2.0) - 1.0;\n                gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n                gl_PointSize = a_size;\n                v_color = a_color;\n            }\n        "),e=this.createShader(t.FRAGMENT_SHADER,"\n            precision mediump float;\n            \n            varying vec4 v_color;\n            \n            void main() {\n                float dist = distance(gl_PointCoord, vec2(0.5, 0.5));\n                if (dist > 0.5) discard;\n                \n                float alpha = 1.0 - (dist * 2.0);\n                gl_FragColor = vec4(v_color.rgb, v_color.a * alpha);\n            }\n        ");this.program=t.createProgram(),t.attachShader(this.program,i),t.attachShader(this.program,e),t.linkProgram(this.program);const s=this.createShader(t.VERTEX_SHADER,"\n            attribute vec2 a_position;\n            attribute vec4 a_color;\n            \n            uniform vec2 u_resolution;\n            \n            varying vec4 v_color;\n            \n            void main() {\n                vec2 clipSpace = ((a_position / u_resolution) * 2.0) - 1.0;\n                gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n                v_color = a_color;\n            }\n        "),r=this.createShader(t.FRAGMENT_SHADER,"\n            precision mediump float;\n            \n            varying vec4 v_color;\n            \n            void main() {\n                gl_FragColor = v_color;\n            }\n        ");this.lineProgram=t.createProgram(),t.attachShader(this.lineProgram,s),t.attachShader(this.lineProgram,r),t.linkProgram(this.lineProgram),this.attribLocations={position:t.getAttribLocation(this.program,"a_position"),size:t.getAttribLocation(this.program,"a_size"),color:t.getAttribLocation(this.program,"a_color")},this.lineAttribLocations={position:t.getAttribLocation(this.lineProgram,"a_position"),color:t.getAttribLocation(this.lineProgram,"a_color")},this.uniformLocations={resolution:t.getUniformLocation(this.program,"u_resolution"),lineResolution:t.getUniformLocation(this.lineProgram,"u_resolution")}}createShader(t,i){const e=this.gl,s=e.createShader(t);return e.shaderSource(s,i),e.compileShader(s),e.getShaderParameter(s,e.COMPILE_STATUS)?s:(console.error("Shader compilation error:",e.getShaderInfoLog(s)),e.deleteShader(s),null)}createBuffers(){const t=this.gl;this.particlePositionBuffer=t.createBuffer(),this.particleSizeBuffer=t.createBuffer(),this.particleColorBuffer=t.createBuffer(),this.linePositionBuffer=t.createBuffer(),this.lineColorBuffer=t.createBuffer()}createParticles(){this.config=JSON.parse(JSON.stringify({particles:{number:{value:80,density:{enable:!0,value_area:800}},color:{value:"#fff"},shape:{type:"circle"},opacity:{value:1,random:!1},size:{value:20,random:!1},line_linked:{enable:!0,distance:100,color:"#fff",opacity:1,width:1},move:{enable:!0,speed:1,direction:"none",random:!1,straight:!1,out_mode:"out"}},interactivity:{detect_on:"canvas",events:{onhover:{enable:!1,mode:"grab"},onclick:{enable:!1,mode:"push"},resize:!0},modes:{grab:{distance:100,line_linked:{opacity:1}},push:{particles_nb:4}}},retina_detect:!1})),this.params&&this.mergeConfig(this.config,this.params),this.particles=[];const t=this.config.particles.number.value;for(let i=0;i<t;i++)this.particles.push(this.createParticle())}mergeConfig(t,i){for(const e in i)i[e]&&"object"==typeof i[e]&&!Array.isArray(i[e])?(t[e]||(t[e]={}),this.mergeConfig(t[e],i[e])):t[e]=i[e]}createParticle(t){const i=this.config,e=this.canvas,s=(i.particles.size.random?Math.random():1)*i.particles.size.value,r=t?t.x:Math.random()*e.width,n=t?t.y:Math.random()*e.height;let a;if(Array.isArray(i.particles.color.value)){const t=i.particles.color.value[Math.floor(Math.random()*i.particles.color.value.length)];a=this.hexToRgb(t)}else a="string"==typeof i.particles.color.value?this.hexToRgb(i.particles.color.value):{r:255,g:255,b:255};const o=(i.particles.opacity.random?Math.random():1)*i.particles.opacity.value;let h,l;const c={top:{x:0,y:-1},"top-right":{x:.5,y:-.5},right:{x:1,y:0},"bottom-right":{x:.5,y:.5},bottom:{x:0,y:1},"bottom-left":{x:-.5,y:1},left:{x:-1,y:0},"top-left":{x:-.5,y:-.5}}[i.particles.move.direction]||{x:0,y:0};return i.particles.move.straight?(h=c.x,l=c.y,i.particles.move.random&&(h*=Math.random(),l*=Math.random())):(h=c.x+Math.random()-.5,l=c.y+Math.random()-.5),{x:r,y:n,radius:s,color:a,opacity:o,vx:h,vy:l,original:{radius:s,opacity:o}}}hexToRgb(t){t=t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(t,i,e,s)=>i+i+e+e+s+s);const i=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return i?{r:parseInt(i[1],16),g:parseInt(i[2],16),b:parseInt(i[3],16)}:{r:255,g:255,b:255}}setupEvents(){const t=this.canvas;t.addEventListener("mousemove",i=>{const e=t.getBoundingClientRect();this.mouse.x=i.clientX-e.left,this.mouse.y=i.clientY-e.top}),t.addEventListener("click",()=>{if(this.config.interactivity.events.onclick.enable){if("push"===this.config.interactivity.events.onclick.mode)for(let t=0;t<this.config.interactivity.modes.push.particles_nb;t++)this.particles.push(this.createParticle({x:this.mouse.x,y:this.mouse.y}))}}),window.addEventListener("resize",()=>{this.resize()})}resize(){const t=document.getElementById(this.tag_id);if(this.canvas&&t&&this.canvas.parentNode===t){const i=t.clientWidth||window.innerWidth,e=t.clientHeight||window.innerHeight;this.canvas.width=i,this.canvas.height=e}}animate(){const t=i=>{0===this.lastFrameTime&&(this.lastFrameTime=i);i-this.lastFrameTime>=this.frameInterval&&(this.update(),this.draw(),this.lastFrameTime=i),this.animationId=requestAnimationFrame(t)};this.animationId=requestAnimationFrame(t)}update(){const t=this.config,i=this.canvas;this.quadtree=new Quadtree({x:i.width/2,y:i.height/2,width:i.width,height:i.height},4);for(let e=0;e<this.particles.length;e++){const s=this.particles[e];if(t.particles.move.enable){const i=t.particles.move.speed/2;s.x+=s.vx*i,s.y+=s.vy*i}"bounce"===t.particles.move.out_mode?(s.x-s.radius>i.width?s.x=s.radius:s.x+s.radius<0&&(s.x=i.width-s.radius),s.y-s.radius>i.height?s.y=s.radius:s.y+s.radius<0&&(s.y=i.height-s.radius),(s.x+s.radius>i.width||s.x-s.radius<0)&&(s.vx=-s.vx),(s.y+s.radius>i.height||s.y-s.radius<0)&&(s.vy=-s.vy)):"snake"===t.particles.move.out_mode?(s.x-s.radius>i.width?s.x=-s.radius:s.x+s.radius<0&&(s.x=i.width+s.radius),s.y-s.radius>i.height?s.y=-s.radius:s.y+s.radius<0&&(s.y=i.height+s.radius)):(s.x-s.radius>i.width?(s.x=-s.radius,s.y=Math.random()*i.height):s.x+s.radius<0&&(s.x=i.width+s.radius,s.y=Math.random()*i.height),s.y-s.radius>i.height?(s.y=-s.radius,s.x=Math.random()*i.width):s.y+s.radius<0&&(s.y=i.height+s.radius,s.x=Math.random()*i.width)),this.quadtree.insert(s)}if(this.lines=[],t.particles.line_linked.enable)for(let e=0;e<this.particles.length;e++){const s=this.particles[e],r={x:s.x,y:s.y,radius:t.particles.line_linked.distance},n=this.quadtree.query(r);for(let i=0;i<n.length;i++){const e=n[i];s!==e&&(this.particles.indexOf(s)>=this.particles.indexOf(e)||this.checkAndAddLine(s,e,t))}if("snake"===t.particles.move.out_mode){if(s.x<t.particles.line_linked.distance){const e={x:s.x+i.width,y:s.y,radius:t.particles.line_linked.distance},r=this.quadtree.query(e);for(let e=0;e<r.length;e++){const n=r[e];if(s===n)continue;if(this.particles.indexOf(s)>=this.particles.indexOf(n))continue;const a={x:s.x+i.width,y:s.y};this.checkAndAddLine(a,n,t)}}if(s.x>i.width-t.particles.line_linked.distance){const e={x:s.x-i.width,y:s.y,radius:t.particles.line_linked.distance},r=this.quadtree.query(e);for(let e=0;e<r.length;e++){const n=r[e];if(s===n)continue;if(this.particles.indexOf(s)>=this.particles.indexOf(n))continue;const a={x:s.x-i.width,y:s.y};this.checkAndAddLine(a,n,t)}}if(s.y<t.particles.line_linked.distance){const e={x:s.x,y:s.y+i.height,radius:t.particles.line_linked.distance},r=this.quadtree.query(e);for(let e=0;e<r.length;e++){const n=r[e];if(s===n)continue;if(this.particles.indexOf(s)>=this.particles.indexOf(n))continue;const a={x:s.x,y:s.y+i.height};this.checkAndAddLine(a,n,t)}}if(s.y>i.height-t.particles.line_linked.distance){const e={x:s.x,y:s.y-i.height,radius:t.particles.line_linked.distance},r=this.quadtree.query(e);for(let e=0;e<r.length;e++){const n=r[e];if(s===n)continue;if(this.particles.indexOf(s)>=this.particles.indexOf(n))continue;const a={x:s.x,y:s.y-i.height};this.checkAndAddLine(a,n,t)}}}}}checkAndAddLine(t,i,e){const s=void 0===t.radius,r=void 0===i.radius,n=t.x-i.x,a=t.y-i.y,o=n*n+a*a;if(o<=e.particles.line_linked.distance*e.particles.line_linked.distance){const n=Math.sqrt(o),a=e.particles.line_linked.opacity*(1-n/e.particles.line_linked.distance);s?this.lines.push({x1:t.x-this.canvas.width*Math.round((t.x-i.x)/this.canvas.width),y1:t.y-this.canvas.height*Math.round((t.y-i.y)/this.canvas.height),x2:i.x,y2:i.y,opacity:a,distance:n}):r?this.lines.push({x1:t.x,y1:t.y,x2:i.x-this.canvas.width*Math.round((i.x-t.x)/this.canvas.width),y2:i.y-this.canvas.height*Math.round((i.y-t.y)/this.canvas.height),opacity:a,distance:n}):this.lines.push({x1:t.x,y1:t.y,x2:i.x,y2:i.y,opacity:a,distance:n})}}draw(){const t=this.gl,i=this.canvas;if(t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT),t.viewport(0,0,i.width,i.height),this.particles.length>0){this.positions.length=0,this.sizes.length=0,this.colors.length=0;for(let t=0;t<this.particles.length;t++){const i=this.particles[t];this.positions.push(i.x,i.y),this.sizes.push(2*i.radius),this.colors.push(i.color.r/255,i.color.g/255,i.color.b/255,i.opacity)}t.useProgram(this.program),t.uniform2f(this.uniformLocations.resolution,i.width,i.height),t.bindBuffer(t.ARRAY_BUFFER,this.particlePositionBuffer),4*this.positions.length>this.particlePositionBufferSize||!this.particlePositionBufferSize?(this.particlePositionBufferSize=4*this.positions.length,t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.positions),t.DYNAMIC_DRAW)):t.bufferSubData(t.ARRAY_BUFFER,0,new Float32Array(this.positions)),t.enableVertexAttribArray(this.attribLocations.position),t.vertexAttribPointer(this.attribLocations.position,2,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,this.particleSizeBuffer),4*this.sizes.length>this.particleSizeBufferSize||!this.particleSizeBufferSize?(this.particleSizeBufferSize=4*this.sizes.length,t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.sizes),t.DYNAMIC_DRAW)):t.bufferSubData(t.ARRAY_BUFFER,0,new Float32Array(this.sizes)),t.enableVertexAttribArray(this.attribLocations.size),t.vertexAttribPointer(this.attribLocations.size,1,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,this.particleColorBuffer),4*this.colors.length>this.particleColorBufferSize||!this.particleColorBufferSize?(this.particleColorBufferSize=4*this.colors.length,t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.colors),t.DYNAMIC_DRAW)):t.bufferSubData(t.ARRAY_BUFFER,0,new Float32Array(this.colors)),t.enableVertexAttribArray(this.attribLocations.color),t.vertexAttribPointer(this.attribLocations.color,4,t.FLOAT,!1,0,0),t.drawArrays(t.POINTS,0,this.particles.length)}if(this.lines.length>0){this.linePositions.length=0,this.lineColors.length=0;for(let t=0;t<this.lines.length;t++){const i=this.lines[t];this.linePositions.push(i.x1,i.y1,i.x2,i.y2);const e=this.hexToRgb(this.config.particles.line_linked.color);this.lineColors.push(e.r/255,e.g/255,e.b/255,i.opacity,e.r/255,e.g/255,e.b/255,i.opacity)}t.useProgram(this.lineProgram),t.uniform2f(this.uniformLocations.lineResolution,i.width,i.height),t.bindBuffer(t.ARRAY_BUFFER,this.linePositionBuffer),4*this.linePositions.length>this.linePositionBufferSize||!this.linePositionBufferSize?(this.linePositionBufferSize=4*this.linePositions.length,t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.linePositions),t.DYNAMIC_DRAW)):t.bufferSubData(t.ARRAY_BUFFER,0,new Float32Array(this.linePositions)),t.enableVertexAttribArray(this.lineAttribLocations.position),t.vertexAttribPointer(this.lineAttribLocations.position,2,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,this.lineColorBuffer),4*this.lineColors.length>this.lineColorBufferSize||!this.lineColorBufferSize?(this.lineColorBufferSize=4*this.lineColors.length,t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.lineColors),t.DYNAMIC_DRAW)):t.bufferSubData(t.ARRAY_BUFFER,0,new Float32Array(this.lineColors)),t.enableVertexAttribArray(this.lineAttribLocations.color),t.vertexAttribPointer(this.lineAttribLocations.color,4,t.FLOAT,!1,0,0),t.drawArrays(t.LINES,0,2*this.lines.length)}}destroy(){if(this.animationId&&cancelAnimationFrame(this.animationId),this.canvas&&(this.canvas.removeEventListener("mousemove",this.onMouseMove),this.canvas.removeEventListener("click",this.onClick)),this.particles=[],this.lines=[],this.gl){const t=this.gl;this.particlePositionBuffer&&t.deleteBuffer(this.particlePositionBuffer),this.particleSizeBuffer&&t.deleteBuffer(this.particleSizeBuffer),this.particleColorBuffer&&t.deleteBuffer(this.particleColorBuffer),this.linePositionBuffer&&t.deleteBuffer(this.linePositionBuffer),this.lineColorBuffer&&t.deleteBuffer(this.lineColorBuffer),this.program&&t.deleteProgram(this.program),this.lineProgram&&t.deleteProgram(this.lineProgram)}this.canvas&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas),this.canvas=null,this.gl=null,this.program=null,this.lineProgram=null,this.particlePositionBuffer=null,this.particleSizeBuffer=null,this.particleColorBuffer=null,this.linePositionBuffer=null,this.lineColorBuffer=null}}!function(){let t=null;window.particlesJS=function(i,e){return t=new WebGLParticles(i,e),window.webglParticles=t,t},window.particlesJS.load=function(t,i,e){const s=new XMLHttpRequest;s.open("GET",i),s.onreadystatechange=function(i){if(4==s.readyState)if(200==s.status){const s=JSON.parse(i.currentTarget.response),r=window.particlesJS(t,s);e&&e(r)}else console.log("Error pJS - XMLHttpRequest status: "+s.status),console.log("Error pJS - File config not found"),e&&e(null)},s.send()},window.particlesJS.getInstance=function(){return t}}();